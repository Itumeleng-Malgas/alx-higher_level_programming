The ``2-matrix_divided`` module
===============================

Using ``matrix_divided``:
-------------------------

Prototype: def matrix_divided(matrix, div):

	>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
	>>> matrix = [[1, 2, 3], [4, 5, 6]]

	Passing matrix of equal row size with all elements as integers.
	>>> matrix_divided(matrix, 3)
	[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

	Arg div canâ€™t be equal to 0.
	>>> matrix_divided(matrix, 0)
	Traceback (most recent call last):
		...
	ZeroDivisionError: division by zero

	Arg div must a number.
	>>> matrix_divided(matrix, "str")
	Traceback (most recent call last):
		...
	TypeError: div must be a number

	Passing matrix of unequal row size.
	>>> matrix = [[1, 2, 3], [4, 5]]
	>>> matrix_divided(matrix, 3)
	Traceback (most recent call last):
		...
	TypeError: Each row of the matrix must have the same size

	Passing a matrix of a none list type.
	>>> matrix = ([1, 2, 3], [4, 5, 6])
	>>> matrix_divided(matrix, 3)
	Traceback (most recent call last):
		...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

	Passing a list matrix of none list objects elements.
	>>> matrix = [(1, 2, 3), (4, 5, 6)]
	>>> matrix_divided(matrix, 3)
	Traceback (most recent call last):
		...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

	Passing a list matrix of lists of none integer/float type elements.
	>>> matrix = [["1", "2", "3"], ["4", "5", "6"]]
	>>> matrix_divided(matrix, 3)
	Traceback (most recent call last):
		...
	TypeError: matrix must be a matrix (list of lists) of integers/floats